// Copyright 2020 ConsenSys AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by gnark/internal/generators DO NOT EDIT

package frontend

import (
	"math/big"
)

// R1CS decsribes a set of R1CS constraint
type R1CS struct {
	// Wires
	NbWires        int
	NbPublicWires  int // includes ONE wire
	NbPrivateWires int
	PrivateWires   []string         // private wire names
	PublicWires    []string         // public wire names
	WireTags       map[int][]string // optional tags -- debug info

	// Constraints
	NbConstraints   int // total number of constraints
	NbCOConstraints int // number of constraints that need to be solved, the first of the Constraints slice
	Constraints     []R1C
}

// method to solve a r1cs
type SolvingMethod uint8

const (
	SingleOutput SolvingMethod = iota
	BinaryDec
)

// Term ...
type TermR1cs struct {
	ID    int64   // index of the constraint used to compute this wire
	Coeff big.Int // coefficient by which the wire is multiplied
}

// LinearExpression
type LinearExpression []TermR1cs

// R1C used to compute the wires
type R1C struct {
	L      LinearExpression
	R      LinearExpression
	O      LinearExpression
	Solver SolvingMethod
}

func bigOne() big.Int {
	var val big.Int
	val.SetUint64(1)
	return val
}
